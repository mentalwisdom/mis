@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName
@{
    string tname = Model.ViewDataTypeShortName.ToLower();
     
    string link_index= @"<li class=""breadcrumb-item""><a href=""/"+tname+@"/index"""+">" + tname+"</a></li>";
}
@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
@:<h2>@Model.ViewName</h2>
@:
    }
    else
    {

    }

<nav aria-label="breadcrumb">
  <ol class="breadcrumb breadcrumb-arrow">
    @link_index
    <li class="breadcrumb-item active" aria-current="page">create</li>
  </ol>
</nav>

<hr/>    
@:<h4>@Model.ViewDataTypeShortName</h4>
@:<hr />
@:<div class="row">
    @:<div class="col-md-4">
        @:<form asp-action="@Model.ViewName">
            @:<div asp-validation-summary="ModelOnly" class="text-danger"></div>
        foreach (var property in Model.ModelMetadata.Properties)
        {
            if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly)
            {
                
                if (property.IsForeignKey)
                {
            @:<div class="form-group">
                @:<label  class="control-label">@@Html.DisplayNameFor(model => model.@property.PropertyName)</label>
           
              
                @:<select asp-for="@property.PropertyName" class ="form-control" asp-items="ViewBag.@property.PropertyName"></select>
            @:</div>
                    continue;
                }

                bool isCheckbox = property.TypeName.Equals("System.Boolean");
                if (isCheckbox)
                {
            @:<div class="form-group">
                @:<div class="checkbox">
                    @:<label>
                        @:<input asp-for="@property.PropertyName" /> @@Html.DisplayNameFor(model => model.@property.PropertyName)
                    @:</label>
                @:</div>
            @:</div>
                }
                else if (property.IsEnum && !property.IsEnumFlags)
                {
            @:<div class="form-group">
                @:<label  class="control-label">@@Html.DisplayNameFor(model => model.@property.PropertyName)</label>
                @:<select asp-for="@property.PropertyName" rows="10" class="form-control"></select>
                @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>
                }
                else if (property.IsMultilineText)
                {
            @:<div class="form-group">
                @:<label  class="control-label">@@Html.DisplayNameFor(model => model.@property.PropertyName)</label>
                @:<textarea asp-for="@property.PropertyName" rows="10" class="form-control"></textarea>
                @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>
                }
                else
                {
            @:<div class="form-group">
                @:<label  class="control-label"> @@Html.DisplayNameFor(model => model.@property.PropertyName)</label>
                @:<input asp-for="@property.PropertyName" class="form-control" />
                @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>
                }
            }
        }
        }
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-default btn-outline-success" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@{
    if (Model.ReferenceScriptLibraries)
    {
@:@@section Scripts {
    @:@@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
@:}
    }
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
 
    }
}
@functions
{
    // Do we need to use this in conjunction with the PrimaryKey check?
    bool IsPropertyGuid(IPropertyMetadata property)
    {
        return string.Equals("System.Guid", property.TypeName, StringComparison.OrdinalIgnoreCase);
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }
    string GetValueExpressionNoUnderScore(IPropertyMetadata property)
    {
        return property.PropertyName.Replace("_"," ");
    }
}